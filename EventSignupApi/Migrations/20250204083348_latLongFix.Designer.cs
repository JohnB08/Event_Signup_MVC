// <auto-generated />
using System;
using EventSignupApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventSignupApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250204083348_latLongFix")]
    partial class latLongFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("EventSignupApi.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Long")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Public")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventSignupApi.Models.EventGenreLookupTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventGenreLookup");
                });

            modelBuilder.Entity("EventSignupApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("AdminEventsEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminsUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdminEventsEventId", "AdminsUserId");

                    b.HasIndex("AdminsUserId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("EventUser1", b =>
                {
                    b.Property<int>("SignUpEventsEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignUpsUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SignUpEventsEventId", "SignUpsUserId");

                    b.HasIndex("SignUpsUserId");

                    b.ToTable("EventUser1");
                });

            modelBuilder.Entity("EventSignupApi.Models.Event", b =>
                {
                    b.HasOne("EventSignupApi.Models.EventGenreLookupTable", "Genre")
                        .WithMany("Events")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", "Owner")
                        .WithOne("OwnedEvent")
                        .HasForeignKey("EventSignupApi.Models.Event", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("EventSignupApi.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("AdminEventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AdminsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser1", b =>
                {
                    b.HasOne("EventSignupApi.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("SignUpEventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SignUpsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSignupApi.Models.EventGenreLookupTable", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventSignupApi.Models.User", b =>
                {
                    b.Navigation("OwnedEvent");
                });
#pragma warning restore 612, 618
        }
    }
}

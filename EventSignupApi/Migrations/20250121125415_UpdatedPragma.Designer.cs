// <auto-generated />
using System;
using EventSignupApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventSignupApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250121125415_UpdatedPragma")]
    partial class UpdatedPragma
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("EventSignupApi.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Public")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId");

                    b.HasIndex("GenreId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventSignupApi.Models.EventGenreLookupTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventGenreLookup");
                });

            modelBuilder.Entity("EventSignupApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserAdminEventRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdminEventRelations");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserOwnerEventRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserOwnerEventRelations");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserSignupEventRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSignupEventRelations");
                });

            modelBuilder.Entity("EventSignupApi.Models.Event", b =>
                {
                    b.HasOne("EventSignupApi.Models.EventGenreLookupTable", "Genre")
                        .WithMany("Events")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserAdminEventRelation", b =>
                {
                    b.HasOne("EventSignupApi.Models.Event", "Event")
                        .WithMany("Admins")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", "User")
                        .WithMany("AdminEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserOwnerEventRelation", b =>
                {
                    b.HasOne("EventSignupApi.Models.Event", "Event")
                        .WithOne("Owner")
                        .HasForeignKey("EventSignupApi.Models.UserOwnerEventRelation", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", "User")
                        .WithOne("OwnedEvent")
                        .HasForeignKey("EventSignupApi.Models.UserOwnerEventRelation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventSignupApi.Models.UserSignupEventRelation", b =>
                {
                    b.HasOne("EventSignupApi.Models.Event", "Event")
                        .WithMany("SignUps")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSignupApi.Models.User", "User")
                        .WithMany("SignUpEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventSignupApi.Models.Event", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("SignUps");
                });

            modelBuilder.Entity("EventSignupApi.Models.EventGenreLookupTable", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventSignupApi.Models.User", b =>
                {
                    b.Navigation("AdminEvents");

                    b.Navigation("OwnedEvent")
                        .IsRequired();

                    b.Navigation("SignUpEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
